{"ast":null,"code":"var _jsxFileName = \"/home/laura/Documents/react-app-course/react-app/post-react-app/src/components/loginForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass LoginForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta,\n      type\n    }) => {\n      const className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, label, React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        type: type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })), this.renderError(meta)));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.onSubmit(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"email\",\n      component: this.renderInput,\n      label: \"Email\",\n      type: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"password\",\n      component: this.renderInput,\n      label: \"Password\",\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, this.props.labelButton));\n  }\n\n}\n\nconst validate = formValues => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  const errors = {};\n\n  if (!formValues.email) {\n    errors.email = 'You must enter an Email';\n  } else if (!re.test(formValues.email)) {\n    errors.email = 'You must enter a valid Email';\n  }\n\n  if (!formValues.password) {\n    errors.password = 'You must enter a password';\n  } else if (formValues.password.length < 6) {\n    errors.password = 'You must enter a password with more than six chars';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'loginForm',\n  validate\n})(LoginForm);","map":{"version":3,"sources":["/home/laura/Documents/react-app-course/react-app/post-react-app/src/components/loginForm.js"],"names":["React","Field","reduxForm","LoginForm","Component","renderInput","input","label","meta","type","className","error","touched","renderError","onSubmit","formValues","props","render","handleSubmit","labelButton","validate","re","errors","email","test","password","length","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass LoginForm extends React.Component {\n    renderError({ error, touched }) {\n        if (touched && error) {\n            return (\n                <div className=\"ui error message\">\n                    <div className=\"header\">\n                        {error}\n                    </div>\n                </div>\n            );\n        }\n    }\n    renderInput = ({ input, label, meta, type }) => {\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`\n        return (\n            <div className=\"field\">\n                <label className={className}>\n                    {label}\n                    <input {...input} autoComplete=\"off\" type={type} />\n                    {this.renderError(meta)}\n                </label>\n            </div>\n        );\n    }\n\n    onSubmit = (formValues) => {\n        this.props.onSubmit(formValues);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n                <Field name=\"email\" component={this.renderInput} label=\"Email\" type=\"email\" />\n                <Field name=\"password\" component={this.renderInput} label=\"Password\" type=\"password\" />\n                <button className=\"ui button primary\">{this.props.labelButton}</button>\n            </form>\n        );\n    }\n}\n\nconst validate = formValues => {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    const errors = {};\n    if (!formValues.email) {\n        errors.email = 'You must enter an Email';\n    } else if (!re.test(formValues.email)) {\n        errors.email = 'You must enter a valid Email';\n    }\n\n    if (!formValues.password) {\n        errors.password = 'You must enter a password';\n    } else if (formValues.password.length < 6) {\n        errors.password = 'You must enter a password with more than six chars';\n    }\n    return errors;\n};\n\n\nexport default reduxForm({\n    form: 'loginForm',\n    validate\n})(LoginForm);"]},"metadata":{},"sourceType":"module"}