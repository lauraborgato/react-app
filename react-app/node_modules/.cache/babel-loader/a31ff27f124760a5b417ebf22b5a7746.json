{"ast":null,"code":"import _defineProperty from \"/home/laura/Documents/react-app-course/react-app/post-react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport FormData from 'form-data';\nimport backendApi from '../apis/backendApi';\nimport { LOGIN, SIGNIN, FETCH_POSTS, LOGOUT, ADD_POST } from './actionTypes';\nimport history from '../history';\nexport const fetchPosts = () => async dispatch => {\n  const response = await backendApi.get('/posts');\n  dispatch({\n    type: FETCH_POSTS,\n    payload: response.data.posts\n  });\n};\nexport const createPost = formValues => async (dispatch, getState) => {\n  const postData = getPostData(formValues);\n  const response = await backendApi.post('/posts', postData, {\n    headers: {\n      'Authorization': \"Bearer \".concat(getState().user.token)\n    }\n  });\n  console.log(response);\n  dispatch({\n    type: ADD_POST,\n    payload: response.data\n  });\n  history.push('/');\n};\nexport const editPost = formValues => async (dispatch, getState) => {\n  let postData;\n\n  if (typeof postImage === 'object') {\n    postData = getPostData(formValues);\n  } else {\n    postData = {\n      id,\n      postTitle,\n      postContent,\n      imagePath: postImage,\n      userId: null\n    };\n  }\n\n  const response = await backendApi.put(\"/posts/\".concat(formValues._id), postData, {\n    headers: {\n      'Authorization': \"Bearer \".concat(getState().user.token)\n    }\n  });\n  console.log(response);\n  dispatch({\n    type: EDIT_POST,\n    payload: response.data\n  });\n  history.push('/');\n};\nexport const loginUser = formValues => async dispatch => {\n  console.log(formValues);\n  const now = new Date();\n  const response = await backendApi.post(\"/user/login\", _objectSpread({}, formValues));\n  const authData = {\n    token: response.data.token,\n    expirationDate: new Date(now.getTime() + response.data.expiresIn * 1000),\n    userId: response.data.userId\n  };\n  dispatch({\n    type: LOGIN,\n    payload: authData\n  });\n  history.push('/');\n};\nexport const logOut = () => {\n  return {\n    type: LOGOUT\n  };\n};\nexport const singUp = (email, password) => async dispatch => {\n  const response = await backendApi.post('user/singup', {\n    email,\n    password\n  });\n  dispatch({\n    type: SIGNIN,\n    payload: response.data\n  });\n};\n\nconst getPostData = formValues => {\n  const postData = new FormData();\n  postData.append('postTitle', formValues.postTitle);\n  postData.append('postContent', formValues.postContent);\n  /**\n   * the three paramas is for axios to parse the image to a binary\n   */\n\n  postData.append('action', 'ADD');\n  postData.append('param', 0);\n  postData.append('secondParam', 0);\n  postData.append('postImage', formValues.postImage, formValues.postTitle);\n  return postData;\n};","map":{"version":3,"sources":["/home/laura/Documents/react-app-course/react-app/post-react-app/src/actions/index.js"],"names":["FormData","backendApi","LOGIN","SIGNIN","FETCH_POSTS","LOGOUT","ADD_POST","history","fetchPosts","dispatch","response","get","type","payload","data","posts","createPost","formValues","getState","postData","getPostData","post","headers","user","token","console","log","push","editPost","postImage","id","postTitle","postContent","imagePath","userId","put","_id","EDIT_POST","loginUser","now","Date","authData","expirationDate","getTime","expiresIn","logOut","singUp","email","password","append"],"mappings":"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","sourcesContent":["import FormData from 'form-data';\nimport backendApi from '../apis/backendApi';\nimport { LOGIN, SIGNIN, FETCH_POSTS, LOGOUT, ADD_POST } from './actionTypes';\nimport history from '../history';\n\nexport const fetchPosts = () => async dispatch => {\n\n    const response = await backendApi.get('/posts');\n    dispatch({ type: FETCH_POSTS, payload: response.data.posts })\n};\n\nexport const createPost = (formValues) => async (dispatch, getState) => {\n    const postData = getPostData(formValues);\n\n    const response = await backendApi.post('/posts', postData, { headers: { 'Authorization': `Bearer ${getState().user.token}` } });\n    console.log(response);\n    dispatch({ type: ADD_POST, payload: response.data });\n\n    history.push('/');\n}\n\nexport const editPost = (formValues) => async (dispatch, getState) => {\n    let postData;\n    if (typeof (postImage) === 'object') {\n        postData = getPostData(formValues);\n      } else {\n        postData = {\n          id,\n          postTitle,\n          postContent,\n          imagePath: postImage,\n          userId: null\n        };\n      }\n    const response = await backendApi.put(`/posts/${formValues._id}`, postData, { headers: { 'Authorization': `Bearer ${getState().user.token}` } });\n    console.log(response);\n    dispatch({ type: EDIT_POST, payload: response.data });\n\n    history.push('/');\n}\n\nexport const loginUser = formValues => async dispatch => {\n    console.log(formValues);\n    const now = new Date();\n    const response = await backendApi.post(`/user/login`, { ...formValues });\n    const authData = {\n        token: response.data.token,\n        expirationDate: new Date(now.getTime() + response.data.expiresIn * 1000),\n        userId: response.data.userId\n    }\n    dispatch({ type: LOGIN, payload: authData });\n\n    history.push('/');\n};\n\nexport const logOut = () => {\n    return { type: LOGOUT };\n}\n\nexport const singUp = (email, password) => async dispatch => {\n    const response = await backendApi.post('user/singup', {\n        email,\n        password\n    });\n    dispatch({ type: SIGNIN, payload: response.data });\n}\n\nconst getPostData = (formValues) =>{\n    const postData = new FormData();\n    postData.append('postTitle', formValues.postTitle);\n    postData.append('postContent', formValues.postContent);\n    /**\n     * the three paramas is for axios to parse the image to a binary\n     */\n    postData.append('action', 'ADD');\n    postData.append('param', 0);\n    postData.append('secondParam', 0);\n    postData.append('postImage', formValues.postImage, formValues.postTitle);\n    return postData;\n}"]},"metadata":{},"sourceType":"module"}