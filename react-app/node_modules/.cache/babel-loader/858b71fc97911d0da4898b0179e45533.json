{"ast":null,"code":"import _defineProperty from \"/home/laura/Documents/brr-27-capacitacion-reactjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport FormData from 'form-data';\nimport backendApi from '../apis/backendApi';\nimport { LOGIN, SIGNIN, FETCH_POSTS, LOGOUT, ADD_POST, EDIT_POST, DELETE_POST } from './actionTypes';\nimport history from '../history';\nexport const fetchPosts = () => async dispatch => {\n  const response = await backendApi.get('/posts').catch(error => {\n    history.push({\n      to: \"/error\",\n      state: error\n    });\n  });\n  dispatch({\n    type: FETCH_POSTS,\n    payload: response.data.posts\n  });\n};\nexport const createPost = formValues => async (dispatch, getState) => {\n  const postData = getPostData(formValues);\n  const response = await backendApi.post('/posts', postData, {\n    headers: {\n      'Authorization': \"Bearer \".concat(getState().user.token)\n    }\n  }).catch(({\n    response\n  }) => {\n    return {\n      code: response.status,\n      message: response.data.message\n    };\n  });\n\n  if (!response.code) {\n    dispatch({\n      type: ADD_POST,\n      payload: response.data.post._doc\n    });\n    history.push('/');\n  } else {\n    history.push({\n      pathname: '/error',\n      state: {\n        title: \"Add post failed\",\n        content: \"Error: \".concat(response.message),\n        redirect: '/'\n      }\n    });\n  }\n};\nexport const editPost = (id, formValues) => async (dispatch, getState) => {\n  let postData;\n\n  if (typeof formValues.postImage === 'object') {\n    postData = getPostData(formValues);\n    postData.append('id', id);\n  } else {\n    postData = {\n      id: id,\n      postTitle: formValues.postTitle,\n      postContent: formValues.postContent,\n      imagePath: formValues.postImage,\n      userId: null\n    };\n  }\n\n  const response = await backendApi.put(\"/posts/\".concat(id), postData, {\n    headers: {\n      'Authorization': \"Bearer \".concat(getState().user.token)\n    }\n  }).catch(({\n    response\n  }) => {\n    return {\n      code: response.status,\n      message: response.data.message\n    };\n  });\n\n  if (!response.code) {\n    dispatch({\n      type: EDIT_POST,\n      payload: response.data.post\n    });\n    history.push('/');\n  } else {\n    history.push({\n      pathname: '/error',\n      state: {\n        title: \"Edit post failed\",\n        content: \"Error: \".concat(response.message),\n        redirect: '/'\n      }\n    });\n  }\n};\nexport const loginUser = formValues => async dispatch => {\n  const now = new Date();\n  const response = await backendApi.post(\"/user/login\", _objectSpread({}, formValues)).catch(({\n    response\n  }) => {\n    return {\n      code: response.status,\n      message: response.data.message\n    };\n  });\n\n  if (!response.code) {\n    const authData = {\n      token: response.data.token,\n      expirationDate: new Date(now.getTime() + response.data.expiresIn * 1000),\n      userId: response.data.userId\n    };\n    dispatch({\n      type: LOGIN,\n      payload: authData\n    });\n    history.push('/');\n  } else {\n    history.push({\n      pathname: '/error',\n      state: {\n        title: \"Authorization failed\",\n        content: \"Error: \".concat(response.message),\n        redirect: '/login'\n      }\n    });\n  }\n};\nexport const logOut = () => {\n  return {\n    type: LOGOUT,\n    payload: null\n  };\n};\nexport const signUp = ({\n  email,\n  password\n}) => async dispatch => {\n  const response = await backendApi.post('user/singup', {\n    email,\n    password\n  }).catch(({\n    response\n  }) => {\n    return {\n      code: response.status,\n      message: response.data.message\n    };\n  });\n\n  if (!response.code) {\n    dispatch({\n      type: SIGNIN\n    });\n    history.push('/login');\n  } else {\n    history.push({\n      pathname: '/error',\n      state: {\n        title: \"Signup failed\",\n        content: \"Error: \".concat(response.message),\n        redirect: '/signup'\n      }\n    });\n  }\n};\n\nconst getPostData = formValues => {\n  const postData = new FormData();\n  postData.append('postTitle', formValues.postTitle);\n  postData.append('postContent', formValues.postContent);\n  /**\n   * the three paramas is for axios to parse the image to a binary\n   */\n\n  postData.append('action', 'ADD');\n  postData.append('param', 0);\n  postData.append('secondParam', 0);\n  postData.append('postImage', formValues.postImage, formValues.postTitle);\n  return postData;\n};\n\nexport const deletePost = id => async (dispatch, getState) => {\n  await backendApi.delete(\"/posts/\".concat(id), {\n    headers: {\n      'Authorization': \"Bearer \".concat(getState().user.token)\n    }\n  });\n  dispatch({\n    type: DELETE_POST,\n    payload: id\n  });\n  history.push('/');\n};","map":{"version":3,"sources":["/home/laura/Documents/brr-27-capacitacion-reactjs/src/actions/index.js"],"names":["FormData","backendApi","LOGIN","SIGNIN","FETCH_POSTS","LOGOUT","ADD_POST","EDIT_POST","DELETE_POST","history","fetchPosts","dispatch","response","get","catch","error","push","to","state","type","payload","data","posts","createPost","formValues","getState","postData","getPostData","post","headers","user","token","code","status","message","_doc","pathname","title","content","redirect","editPost","id","postImage","append","postTitle","postContent","imagePath","userId","put","loginUser","now","Date","authData","expirationDate","getTime","expiresIn","logOut","signUp","email","password","deletePost","delete"],"mappings":"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","sourcesContent":["import FormData from 'form-data';\nimport backendApi from '../apis/backendApi';\nimport { LOGIN, SIGNIN, FETCH_POSTS, LOGOUT, ADD_POST, EDIT_POST, DELETE_POST } from './actionTypes';\nimport history from '../history';\n\nexport const fetchPosts = () => async dispatch => {\n\n    const response = await backendApi.get('/posts')\n        .catch(error => { history.push({ to: \"/error\", state: error }) });\n    dispatch({ type: FETCH_POSTS, payload: response.data.posts })\n};\n\nexport const createPost = (formValues) => async (dispatch, getState) => {\n    const postData = getPostData(formValues);\n\n    const response = await backendApi.post('/posts',\n        postData,\n        { headers: { 'Authorization': `Bearer ${getState().user.token}` } })\n        .catch(({ response }) => { return { code: response.status, message: response.data.message } });\n\n    if (!response.code) {\n        dispatch({ type: ADD_POST, payload: response.data.post._doc });\n\n        history.push('/');\n    } else {\n        history.push({ pathname: '/error', state: { title: `Add post failed`, content: `Error: ${response.message}`, redirect: '/' } });\n    }\n}\n\nexport const editPost = (id, formValues) => async (dispatch, getState) => {\n    let postData;\n    if (typeof (formValues.postImage) === 'object') {\n        postData = getPostData(formValues);\n        postData.append('id', id);\n    } else {\n        postData = {\n            id: id,\n            postTitle: formValues.postTitle,\n            postContent: formValues.postContent,\n            imagePath: formValues.postImage,\n            userId: null\n        };\n    }\n    const response = await backendApi.put(`/posts/${id}`, postData, { headers: { 'Authorization': `Bearer ${getState().user.token}` } })\n        .catch(({ response }) => { return { code: response.status, message: response.data.message } });\n    if (!response.code) {\n        dispatch({ type: EDIT_POST, payload: response.data.post });\n        history.push('/');\n    } else {\n        history.push({ pathname: '/error', state: { title: `Edit post failed`, content: `Error: ${response.message}`, redirect: '/' } });\n    }\n\n}\n\nexport const loginUser = formValues => async dispatch => {\n    const now = new Date();\n    const response = await backendApi.post(`/user/login`, { ...formValues })\n        .catch(({ response }) => {\n            return { code: response.status, message: response.data.message };\n        });\n    if (!response.code) {\n        const authData = {\n            token: response.data.token,\n            expirationDate: new Date(now.getTime() + response.data.expiresIn * 1000),\n            userId: response.data.userId\n        }\n        dispatch({ type: LOGIN, payload: authData });\n\n        history.push('/');\n    } else {\n        history.push({ pathname: '/error', state: { title: `Authorization failed`, content: `Error: ${response.message}`, redirect: '/login' } });\n    }\n};\n\nexport const logOut = () => {\n    return { type: LOGOUT, payload: null };\n}\n\nexport const signUp = ({ email, password }) => async dispatch => {\n    const response = await backendApi.post('user/singup', {\n        email, password\n    })\n        .catch(({ response }) => {\n            return { code: response.status, message: response.data.message };\n        });\n    if (!response.code) {\n        dispatch({ type: SIGNIN });\n        history.push('/login');\n    } else {\n        history.push({ pathname: '/error', state: { title: `Signup failed`, content: `Error: ${response.message}`, redirect: '/signup' } });\n    }\n\n}\n\nconst getPostData = (formValues) => {\n    const postData = new FormData();\n    postData.append('postTitle', formValues.postTitle);\n    postData.append('postContent', formValues.postContent);\n    /**\n     * the three paramas is for axios to parse the image to a binary\n     */\n    postData.append('action', 'ADD');\n    postData.append('param', 0);\n    postData.append('secondParam', 0);\n    postData.append('postImage', formValues.postImage, formValues.postTitle);\n    return postData;\n}\n\nexport const deletePost = id => async (dispatch, getState) => {\n    await backendApi.delete(`/posts/${id}`, { headers: { 'Authorization': `Bearer ${getState().user.token}` } });\n    dispatch({ type: DELETE_POST, payload: id });\n    history.push('/');\n}"]},"metadata":{},"sourceType":"module"}