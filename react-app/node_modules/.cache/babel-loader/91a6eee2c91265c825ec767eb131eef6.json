{"ast":null,"code":"import _defineProperty from \"/home/laura/Documents/react-app-course/react-app/post-react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport FormData from 'form-data';\nimport backendApi from '../apis/backendApi';\nimport { LOGIN, SIGNIN, FETCH_POSTS, LOGOUT, ADD_POST, EDIT_POST } from './actionTypes';\nimport history from '../history';\nexport const fetchPosts = () => async dispatch => {\n  const response = await backendApi.get('/posts');\n  dispatch({\n    type: FETCH_POSTS,\n    payload: response.data.posts\n  });\n};\nexport const createPost = formValues => async (dispatch, getState) => {\n  const postData = getPostData(formValues);\n  const response = await backendApi.post('/posts', postData, {\n    headers: {\n      'Authorization': \"Bearer \".concat(getState().user.token)\n    }\n  });\n  console.log(response);\n  dispatch({\n    type: ADD_POST,\n    payload: response.data.post._doc\n  });\n  history.push('/');\n};\nexport const editPost = (id, formValues) => async (dispatch, getState) => {\n  let postData;\n\n  if (typeof formValues.postImage === 'object') {\n    postData = getPostData(formValues);\n  } else {\n    postData = {\n      id: id,\n      postTitle: formValues.postTitle,\n      postContent: formValues.postContent,\n      imagePath: formValues.postImage,\n      userId: null\n    };\n  }\n\n  const response = await backendApi.put(\"/posts/\".concat(id), postData, {\n    headers: {\n      'Authorization': \"Bearer \".concat(getState().user.token)\n    }\n  });\n  console.log(response);\n  dispatch({\n    type: EDIT_POST,\n    payload: response.data.post\n  });\n  history.push('/');\n};\nexport const loginUser = formValues => async dispatch => {\n  console.log(formValues);\n  const now = new Date();\n  const response = await backendApi.post(\"/user/login\", _objectSpread({}, formValues));\n  const authData = {\n    token: response.data.token,\n    expirationDate: new Date(now.getTime() + response.data.expiresIn * 1000),\n    userId: response.data.userId\n  };\n  dispatch({\n    type: LOGIN,\n    payload: authData\n  });\n  history.push('/');\n};\nexport const logOut = () => {\n  return {\n    type: LOGOUT\n  };\n};\nexport const singUp = (email, password) => async dispatch => {\n  const response = await backendApi.post('user/singup', {\n    email,\n    password\n  });\n  dispatch({\n    type: SIGNIN,\n    payload: response.data\n  });\n};\n\nconst getPostData = formValues => {\n  const postData = new FormData();\n  postData.append('postTitle', formValues.postTitle);\n  postData.append('postContent', formValues.postContent);\n  /**\n   * the three paramas is for axios to parse the image to a binary\n   */\n\n  postData.append('action', 'ADD');\n  postData.append('param', 0);\n  postData.append('secondParam', 0);\n  postData.append('postImage', formValues.postImage, formValues.postTitle);\n  return postData;\n};","map":{"version":3,"sources":["/home/laura/Documents/react-app-course/react-app/post-react-app/src/actions/index.js"],"names":["FormData","backendApi","LOGIN","SIGNIN","FETCH_POSTS","LOGOUT","ADD_POST","EDIT_POST","history","fetchPosts","dispatch","response","get","type","payload","data","posts","createPost","formValues","getState","postData","getPostData","post","headers","user","token","console","log","_doc","push","editPost","id","postImage","postTitle","postContent","imagePath","userId","put","loginUser","now","Date","authData","expirationDate","getTime","expiresIn","logOut","singUp","email","password","append"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,WAAxB,EAAqCC,MAArC,EAA6CC,QAA7C,EAAuDC,SAAvD,QAAwE,eAAxE;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAE9C,QAAMC,QAAQ,GAAG,MAAMV,UAAU,CAACW,GAAX,CAAe,QAAf,CAAvB;AACAF,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAET,WAAR;AAAqBU,IAAAA,OAAO,EAAEH,QAAQ,CAACI,IAAT,CAAcC;AAA5C,GAAD,CAAR;AACH,CAJM;AAMP,OAAO,MAAMC,UAAU,GAAIC,UAAD,IAAgB,OAAOR,QAAP,EAAiBS,QAAjB,KAA8B;AACpE,QAAMC,QAAQ,GAAGC,WAAW,CAACH,UAAD,CAA5B;AAEA,QAAMP,QAAQ,GAAG,MAAMV,UAAU,CAACqB,IAAX,CAAgB,QAAhB,EAA0BF,QAA1B,EAAoC;AAAEG,IAAAA,OAAO,EAAE;AAAE,wCAA2BJ,QAAQ,GAAGK,IAAX,CAAgBC,KAA3C;AAAF;AAAX,GAApC,CAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAZ;AACAD,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEP,QAAR;AAAkBQ,IAAAA,OAAO,EAAEH,QAAQ,CAACI,IAAT,CAAcO,IAAd,CAAmBM;AAA9C,GAAD,CAAR;AAEApB,EAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACH,CARM;AAUP,OAAO,MAAMC,QAAQ,GAAG,CAACC,EAAD,EAAKb,UAAL,KAAoB,OAAOR,QAAP,EAAiBS,QAAjB,KAA8B;AACtE,MAAIC,QAAJ;;AACA,MAAI,OAAQF,UAAU,CAACc,SAAnB,KAAkC,QAAtC,EAAgD;AAC5CZ,IAAAA,QAAQ,GAAGC,WAAW,CAACH,UAAD,CAAtB;AACD,GAFH,MAES;AACLE,IAAAA,QAAQ,GAAG;AACTW,MAAAA,EAAE,EAAEA,EADK;AAETE,MAAAA,SAAS,EAAEf,UAAU,CAACe,SAFb;AAGTC,MAAAA,WAAW,EAAEhB,UAAU,CAACgB,WAHf;AAITC,MAAAA,SAAS,EAAEjB,UAAU,CAACc,SAJb;AAKTI,MAAAA,MAAM,EAAE;AALC,KAAX;AAOD;;AACH,QAAMzB,QAAQ,GAAG,MAAMV,UAAU,CAACoC,GAAX,kBAAyBN,EAAzB,GAA+BX,QAA/B,EAAyC;AAAEG,IAAAA,OAAO,EAAE;AAAE,wCAA2BJ,QAAQ,GAAGK,IAAX,CAAgBC,KAA3C;AAAF;AAAX,GAAzC,CAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAZ;AACAD,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEN,SAAR;AAAmBO,IAAAA,OAAO,EAAEH,QAAQ,CAACI,IAAT,CAAcO;AAA1C,GAAD,CAAR;AAEAd,EAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACH,CAlBM;AAoBP,OAAO,MAAMS,SAAS,GAAGpB,UAAU,IAAI,MAAMR,QAAN,IAAkB;AACrDgB,EAAAA,OAAO,CAACC,GAAR,CAAYT,UAAZ;AACA,QAAMqB,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,QAAM7B,QAAQ,GAAG,MAAMV,UAAU,CAACqB,IAAX,kCAAoCJ,UAApC,EAAvB;AACA,QAAMuB,QAAQ,GAAG;AACbhB,IAAAA,KAAK,EAAEd,QAAQ,CAACI,IAAT,CAAcU,KADR;AAEbiB,IAAAA,cAAc,EAAE,IAAIF,IAAJ,CAASD,GAAG,CAACI,OAAJ,KAAgBhC,QAAQ,CAACI,IAAT,CAAc6B,SAAd,GAA0B,IAAnD,CAFH;AAGbR,IAAAA,MAAM,EAAEzB,QAAQ,CAACI,IAAT,CAAcqB;AAHT,GAAjB;AAKA1B,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEX,KAAR;AAAeY,IAAAA,OAAO,EAAE2B;AAAxB,GAAD,CAAR;AAEAjC,EAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACH,CAZM;AAcP,OAAO,MAAMgB,MAAM,GAAG,MAAM;AACxB,SAAO;AAAEhC,IAAAA,IAAI,EAAER;AAAR,GAAP;AACH,CAFM;AAIP,OAAO,MAAMyC,MAAM,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAMtC,QAAN,IAAkB;AACzD,QAAMC,QAAQ,GAAG,MAAMV,UAAU,CAACqB,IAAX,CAAgB,aAAhB,EAA+B;AAClDyB,IAAAA,KADkD;AAElDC,IAAAA;AAFkD,GAA/B,CAAvB;AAIAtC,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEV,MAAR;AAAgBW,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAlC,GAAD,CAAR;AACH,CANM;;AAQP,MAAMM,WAAW,GAAIH,UAAD,IAAe;AAC/B,QAAME,QAAQ,GAAG,IAAIpB,QAAJ,EAAjB;AACAoB,EAAAA,QAAQ,CAAC6B,MAAT,CAAgB,WAAhB,EAA6B/B,UAAU,CAACe,SAAxC;AACAb,EAAAA,QAAQ,CAAC6B,MAAT,CAAgB,aAAhB,EAA+B/B,UAAU,CAACgB,WAA1C;AACA;;;;AAGAd,EAAAA,QAAQ,CAAC6B,MAAT,CAAgB,QAAhB,EAA0B,KAA1B;AACA7B,EAAAA,QAAQ,CAAC6B,MAAT,CAAgB,OAAhB,EAAyB,CAAzB;AACA7B,EAAAA,QAAQ,CAAC6B,MAAT,CAAgB,aAAhB,EAA+B,CAA/B;AACA7B,EAAAA,QAAQ,CAAC6B,MAAT,CAAgB,WAAhB,EAA6B/B,UAAU,CAACc,SAAxC,EAAmDd,UAAU,CAACe,SAA9D;AACA,SAAOb,QAAP;AACH,CAZD","sourcesContent":["import FormData from 'form-data';\nimport backendApi from '../apis/backendApi';\nimport { LOGIN, SIGNIN, FETCH_POSTS, LOGOUT, ADD_POST, EDIT_POST } from './actionTypes';\nimport history from '../history';\n\nexport const fetchPosts = () => async dispatch => {\n\n    const response = await backendApi.get('/posts');\n    dispatch({ type: FETCH_POSTS, payload: response.data.posts })\n};\n\nexport const createPost = (formValues) => async (dispatch, getState) => {\n    const postData = getPostData(formValues);\n\n    const response = await backendApi.post('/posts', postData, { headers: { 'Authorization': `Bearer ${getState().user.token}` } });\n    console.log(response);\n    dispatch({ type: ADD_POST, payload: response.data.post._doc });\n\n    history.push('/');\n}\n\nexport const editPost = (id, formValues) => async (dispatch, getState) => {\n    let postData;\n    if (typeof (formValues.postImage) === 'object') {\n        postData = getPostData(formValues);\n      } else {\n        postData = {\n          id: id,\n          postTitle: formValues.postTitle,\n          postContent: formValues.postContent,\n          imagePath: formValues.postImage,\n          userId: null\n        };\n      }\n    const response = await backendApi.put(`/posts/${id}`, postData, { headers: { 'Authorization': `Bearer ${getState().user.token}` } });\n    console.log(response);\n    dispatch({ type: EDIT_POST, payload: response.data.post });\n\n    history.push('/');\n}\n\nexport const loginUser = formValues => async dispatch => {\n    console.log(formValues);\n    const now = new Date();\n    const response = await backendApi.post(`/user/login`, { ...formValues });\n    const authData = {\n        token: response.data.token,\n        expirationDate: new Date(now.getTime() + response.data.expiresIn * 1000),\n        userId: response.data.userId\n    }\n    dispatch({ type: LOGIN, payload: authData });\n\n    history.push('/');\n};\n\nexport const logOut = () => {\n    return { type: LOGOUT };\n}\n\nexport const singUp = (email, password) => async dispatch => {\n    const response = await backendApi.post('user/singup', {\n        email,\n        password\n    });\n    dispatch({ type: SIGNIN, payload: response.data });\n}\n\nconst getPostData = (formValues) =>{\n    const postData = new FormData();\n    postData.append('postTitle', formValues.postTitle);\n    postData.append('postContent', formValues.postContent);\n    /**\n     * the three paramas is for axios to parse the image to a binary\n     */\n    postData.append('action', 'ADD');\n    postData.append('param', 0);\n    postData.append('secondParam', 0);\n    postData.append('postImage', formValues.postImage, formValues.postTitle);\n    return postData;\n}"]},"metadata":{},"sourceType":"module"}